<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddContentToExcel" xml:space="preserve">
    <value>Запись контента в excel файл...</value>
  </data>
  <data name="CommandExamples" xml:space="preserve">
    <value>Примеры вызова:</value>
  </data>
  <data name="CommandOptionalParams" xml:space="preserve">
    <value>Необязательные параметры:</value>
  </data>
  <data name="CommandParams" xml:space="preserve">
    <value>Параметры команды:</value>
  </data>
  <data name="CommandParamUsage" xml:space="preserve">
    <value>{0}{1}={2} (Запуск указанной команды)</value>
  </data>
  <data name="CommandUsage" xml:space="preserve">
    <value>Параметры вызова команды:</value>
  </data>
  <data name="ContentFileParamUsage" xml:space="preserve">
    <value>{0}{1}=&lt;Имя файла контента приложения TheBrain&gt; (По умолчанию  = {2})</value>
  </data>
  <data name="CreateExcelFile" xml:space="preserve">
    <value>Создать еxcel файл на основе данных приложения 'TheBrain'</value>
  </data>
  <data name="DatabaseFileParamUsage" xml:space="preserve">
    <value>{0}{1}=&lt;Имя файла базы данных приложения TheBrain&gt; (По умолчанию = {2})</value>
  </data>
  <data name="DatabaseParamUsage" xml:space="preserve">
    <value>{0}{1}=&lt;Путь к базе данных приложения TheBrain&gt;</value>
  </data>
  <data name="DbFileNotFound" xml:space="preserve">
    <value>Файл базы данных '{0}' не найден</value>
  </data>
  <data name="ExcelFileEmpty" xml:space="preserve">
    <value>Excel файл '{0}' не содержит данных</value>
  </data>
  <data name="ExcelFileNameEmpty" xml:space="preserve">
    <value>Имя еxcel файла не указано</value>
  </data>
  <data name="ExcelFileNotFound" xml:space="preserve">
    <value>Excel файл '{0}' не найден</value>
  </data>
  <data name="ExcelFilePathNotFound" xml:space="preserve">
    <value>Путь к еxcel файлу '{0}' не найден</value>
  </data>
  <data name="ExcelParamUsage" xml:space="preserve">
    <value>{0}{1}=&lt;Путь к файлу excel&gt;</value>
  </data>
  <data name="FileLocked" xml:space="preserve">
    <value>Файл '{0}' заблокирован другим процессом</value>
  </data>
  <data name="FilesCount" xml:space="preserve">
    <value>Количество файлов: {0}</value>
  </data>
  <data name="FilesNotFound" xml:space="preserve">
    <value>Контент файлы '{0}' не найдены</value>
  </data>
  <data name="FindFiles" xml:space="preserve">
    <value>Поиск '{0}' файлов в папке '{1}'</value>
  </data>
  <data name="LangParamUsage" xml:space="preserve">
    <value>{0}{1}=&lt;Установить язык приложения ru/en&gt; (Default = {2})</value>
  </data>
  <data name="LoadDataFromDb" xml:space="preserve">
    <value>Загрузка данных из '{0}'</value>
  </data>
  <data name="LogFileParamUsage" xml:space="preserve">
    <value>{0}{1}=&lt;Путь к файлу логирования&gt; (Default = {2})</value>
  </data>
  <data name="OldFormatContentFileNameParamUsage" xml:space="preserve">
    <value>{0}{1}=&lt;Имя файла контента для старого формата приложения TheBrain&gt; (По умолчанию  = {2})</value>
  </data>
  <data name="OldFormatContentFolderNameParamUsage" xml:space="preserve">
    <value>{0}{1}=&lt;Имя папки контента для старого формата приложения TheBrain&gt; (По умолчанию  = {2})</value>
  </data>
  <data name="ParameterNotSpecified" xml:space="preserve">
    <value>Параметр '{0}' не указан</value>
  </data>
  <data name="PathNotFound" xml:space="preserve">
    <value>Путь '{0}' не найден</value>
  </data>
  <data name="Processed" xml:space="preserve">
    <value>Обработано: {0} из {1}</value>
  </data>
  <data name="RebuildBrainIndexWarning" xml:space="preserve">
    <value>Пожалуйста, выполните команду «File-&gt;Utilities-&gt;Restore Brain Index» после обновления контента</value>
  </data>
  <data name="RowFileNotFound" xml:space="preserve">
    <value>Строка {0}: файл '{1}' не найден</value>
  </data>
  <data name="RowWithoutId" xml:space="preserve">
    <value>Строка {0}: строка не содержит идентификатор контента</value>
  </data>
  <data name="RowWrongId" xml:space="preserve">
    <value>Строка {0}: идентификатор контента '{1}' в базе данных не найден</value>
  </data>
  <data name="RunCommand" xml:space="preserve">
    <value>Запуск команды: {0}</value>
  </data>
  <data name="SavingExcelFile" xml:space="preserve">
    <value>Сохранение данных в excel файл '{0}'...</value>
  </data>
  <data name="SeeLogFilePath" xml:space="preserve">
    <value>См. лог файл: '{0}'</value>
  </data>
  <data name="SyncBrainWarning" xml:space="preserve">
    <value>Пожалуйста, выполните синхронизацию «Online-&gt;Sync Brain» после обновления контента</value>
  </data>
  <data name="ThoughtsCount" xml:space="preserve">
    <value>Количество узлов (thoughts) : {0}</value>
  </data>
  <data name="UpdateAllThoughtsParamUsage" xml:space="preserve">
    <value>{0}{1}=&lt;Выполнить обновление всех узлов (thoughts) true/false&gt; (Default = {2})</value>
  </data>
  <data name="UploadFilesFromExcelFile" xml:space="preserve">
    <value>Загрузить контент из еxcel файла в приложение 'TheBrain'</value>
  </data>
  <data name="СommandCompleted" xml:space="preserve">
    <value>Команда выполнена успешно</value>
  </data>
  <data name="СommandCompletedError" xml:space="preserve">
    <value>Команда выполнена с ошибкой</value>
  </data>
</root>